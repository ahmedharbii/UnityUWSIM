<?xml version="1.0"?>
<robot name="BlueRov2" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="PI" value="3.1415926535897931"/>

  <xacro:property name="eps" value="0.00000001"/>

  <!-- Thruster link -->
    <xacro:macro name="thruster_dummy_link" params="name xyz rpy">
        <joint name="${name}" type="fixed">
            <parent link="base_link"/>
            <child link="${name}"/>
            <origin rpy="${rpy}" xyz="${xyz}"/>
        </joint>

        <link name="${name}">
            <!--buoyancy><compensation>1.0</compensation></buoyancy>
            <visual name="${name}">
                <geometry>
                    <cylinder length=".5" radius=".01"/>
                </geometry>
                <material name="black">
                    <color rgba="0 0 0 1"/>
                </material>
            </visual-->
            <!--inertial>
                <mass value=".1"/>
                <inertia
                    ixx=".1"
                    ixy="0.0"
                    ixz="0.0"
                    iyy=".1"
                    iyz="0.0"
                    izz=".1"/>
                </inertial-->
            </link>
            <gazebo reference="${name}">
                <material>Gazebo/Black</material>
            </gazebo>
        </xacro:macro>


  <!-- Plugin list -->
    <gazebo>
    <!-- Gazebo plugin listens to the body-->
    <plugin name="freefloating_gazebo_control" filename="libfreefloating_gazebo_control.so">
        <switchService>switch</switchService>
        <updateRate>100</updateRate>
        <link>base_link</link>

        <!-- for each thruster, give the map to XYZ+RPY and the maximum effort -->
        <!-- Based on 6 thrusters vectored frame https://www.ardusub.com/images/vectored-frame.png -->
        <!-- BlueRov2 CAD https://grabcad.com/library/bluerov2-1 -->
        <thruster>
            <effort>30</effort>
            <name>thr1</name>
            <map>0.707 0.707 0 0 0 -0.167</map>
        </thruster>
        <thruster>
            <effort>30</effort>
            <name>thr2</name>
            <map>-0.707 0.707 0 0 0 0.167</map>
        </thruster>
        <thruster>
            <effort>30</effort>
            <name>thr3</name>
            <map>0.707 -0.707 0 0 0 0.167</map>
        </thruster>
        <thruster>
            <effort>30</effort>
            <name>thr4</name>
            <map>-0.707 -0.707 0 0 0 -0.167</map>
        </thruster>
        <thruster>
            <effort>30</effort>
            <name>thr5</name>
            <map>0 0 -1 0 -0.111 0</map>
        </thruster>
        <thruster>
            <effort>30</effort>
            <name>thr6</name>
            <map>0 0 -1 0 0.111 0</map>
        </thruster>
    </plugin>
    </gazebo>

  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://bluerov_ros_playground/model/BlueRov2.dae"/>
      </geometry>
    </visual>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="11"/>
    <inertia
      ixx="1"
      ixy="0"
      ixz="0"
      iyy="1"
      iyz="0"
      izz="1"/>
    </inertial>
    <!--collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
      <box size="0.5 0.5 0.5"/>
      </geometry>
    </collision-->
    <buoyancy>
        <compensation>0.2525</compensation>
        <origin xyz= "0.12585 0.111 -0.8945"/>
    </buoyancy>
    <buoyancy>
        <compensation>0.2525</compensation>
        <origin xyz= "-0.12585 0.111 -0.8945"/>
    </buoyancy>
    <buoyancy>
        <compensation>0.2525</compensation>
        <origin xyz= "-0.12585 -0.111 -0.8945"/>
    </buoyancy>
    <buoyancy>
        <compensation>0.2525</compensation>
        <origin xyz= "0.12585 -0.111 -0.8945"/>
    </buoyancy>
  </link>

  <link name="camera_link">
    <!-- visual>
      <geometry>
        <box size="0.1 0.1 0.1"/>
      </geometry>
      <material name="black">
        <color rgba="1 1 1 1"/>
      </material>
    </visual -->
  </link>
  <joint name="camera_joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <origin rpy="${PI} 0 ${PI/2}" xyz="0 0.21 -0.067"/>
    <axis xyz="1 0 0" />
  </joint>

  <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>10.0</update_rate>
      <camera name="head">
      <!-- https://elinux.com/Rpi_Camera_Module  -->
        <horizontal_fov>1.0855</horizontal_fov>
        <!-- vertical_fov>0.85169</vertical_fov -->
        <image>
          <width>1920</width>
          <height>1080</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.01</near>
          <far>500</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <visualize>true</visualize>
        <updateRate>30.0</updateRate>
        <cameraName>camera</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
