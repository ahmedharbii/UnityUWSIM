//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by
//     com.unity.inputsystem:InputActionCodeGenerator version 1.4.4 from
//     Assets/RovControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RovControls : IInputActionCollection2, IDisposable {
  public InputActionAsset asset { get; }
  public @RovControls() {
    asset = InputActionAsset.FromJson(@"{
    ""name"": ""RovControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""8204a62b-541e-413f-99fc-7968a89e4a17"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""ea08f477-4cd8-4bac-8706-a26b57485438"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""ce0cb7e6-b79c-4861-9197-8138e2210f79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Value"",
                    ""id"": ""9b6e83d5-188e-4654-bfed-904be3e956e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Value"",
                    ""id"": ""c0e222fe-dc81-487c-83b8-7fbcc583dc94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1e60a931-1565-4d66-8a61-b3aa82aed6f1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a48b21c0-6fd9-46c1-a07a-89992c270db7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6e292b3-dc35-4485-aa08-d38a11b545ac"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1acd8d0f-5edc-4eac-a235-0564bf0fc3a0"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
    // Gameplay
    m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
    m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
    m_Gameplay_Rotate = m_Gameplay.FindAction("Rotate", throwIfNotFound: true);
    m_Gameplay_MoveUp = m_Gameplay.FindAction("MoveUp", throwIfNotFound: true);
    m_Gameplay_MoveDown =
        m_Gameplay.FindAction("MoveDown", throwIfNotFound: true);
  }

  public void Dispose() { UnityEngine.Object.Destroy(asset); }

  public InputBinding? bindingMask {
    get => asset.bindingMask;
    set => asset.bindingMask = value;
  }

  public ReadOnlyArray<InputDevice>? devices {
    get => asset.devices;
    set => asset.devices = value;
  }

  public ReadOnlyArray<InputControlScheme> controlSchemes =>
      asset.controlSchemes;

  public bool Contains(InputAction action) { return asset.Contains(action); }

  public IEnumerator<InputAction> GetEnumerator() {
    return asset.GetEnumerator();
  }

  IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); }

  public void Enable() { asset.Enable(); }

  public void Disable() { asset.Disable(); }
  public IEnumerable<InputBinding> bindings => asset.bindings;

  public InputAction FindAction(string actionNameOrId,
                                bool throwIfNotFound = false) {
    return asset.FindAction(actionNameOrId, throwIfNotFound);
  }
  public int FindBinding(InputBinding bindingMask, out InputAction action) {
    return asset.FindBinding(bindingMask, out action);
  }

  // Gameplay
  private readonly InputActionMap m_Gameplay;
  private IGameplayActions m_GameplayActionsCallbackInterface;
  private readonly InputAction m_Gameplay_Move;
  private readonly InputAction m_Gameplay_Rotate;
  private readonly InputAction m_Gameplay_MoveUp;
  private readonly InputAction m_Gameplay_MoveDown;
  public struct GameplayActions {
    private @RovControls m_Wrapper;
    public GameplayActions(@RovControls wrapper) { m_Wrapper = wrapper; }
    public InputAction @Move => m_Wrapper.m_Gameplay_Move;
    public InputAction @Rotate => m_Wrapper.m_Gameplay_Rotate;
    public InputAction @MoveUp => m_Wrapper.m_Gameplay_MoveUp;
    public InputAction @MoveDown => m_Wrapper.m_Gameplay_MoveDown;
    public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
    public void Enable() { Get().Enable(); }
    public void Disable() { Get().Disable(); }
    public bool enabled => Get().enabled;
    public static implicit operator InputActionMap(GameplayActions set) {
      return set.Get();
    }
    public void SetCallbacks(IGameplayActions instance) {
      if (m_Wrapper.m_GameplayActionsCallbackInterface != null) {
        @Move.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
        @Move.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
        @Move.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove;
        @Rotate.started -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnRotate;
        @Rotate.performed -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnRotate;
        @Rotate.canceled -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnRotate;
        @MoveUp.started -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveUp;
        @MoveUp.performed -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveUp;
        @MoveUp.canceled -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveUp;
        @MoveDown.started -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveDown;
        @MoveDown.performed -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveDown;
        @MoveDown.canceled -=
            m_Wrapper.m_GameplayActionsCallbackInterface.OnMoveDown;
      }
      m_Wrapper.m_GameplayActionsCallbackInterface = instance;
      if (instance != null) {
        @Move.started += instance.OnMove;
        @Move.performed += instance.OnMove;
        @Move.canceled += instance.OnMove;
        @Rotate.started += instance.OnRotate;
        @Rotate.performed += instance.OnRotate;
        @Rotate.canceled += instance.OnRotate;
        @MoveUp.started += instance.OnMoveUp;
        @MoveUp.performed += instance.OnMoveUp;
        @MoveUp.canceled += instance.OnMoveUp;
        @MoveDown.started += instance.OnMoveDown;
        @MoveDown.performed += instance.OnMoveDown;
        @MoveDown.canceled += instance.OnMoveDown;
      }
    }
  }
  public GameplayActions @Gameplay => new GameplayActions(this);
  public interface IGameplayActions {
    void OnMove(InputAction.CallbackContext context);
    void OnRotate(InputAction.CallbackContext context);
    void OnMoveUp(InputAction.CallbackContext context);
    void OnMoveDown(InputAction.CallbackContext context);
  }
}
